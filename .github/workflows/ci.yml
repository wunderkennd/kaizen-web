name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: gcr.io
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

jobs:
  # Job 1: Code Quality and Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for frontend directory
        id: check_frontend
        run: |
          if [ -d "services/frontend" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Frontend directory not found - skipping frontend checks"
          fi

      - name: Setup Node.js
        if: steps.check_frontend.outputs.exists == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Check for Go services
        id: check_go
        run: |
          if [ -d "services/genui-orchestrator" ] || [ -d "services/user-context-service" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Go service directories not found - skipping Go checks"
          fi

      - name: Setup Go
        if: steps.check_go.outputs.exists == 'true'
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Check for Rust services
        id: check_rust
        run: |
          if [ -d "services/kre-engine" ] || [ -d "services/streaming-adapter" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Rust service directories not found - skipping Rust checks"
          fi

      - name: Setup Rust
        if: steps.check_rust.outputs.exists == 'true'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Check for Python services
        id: check_python
        run: |
          if [ -d "services/pcm-classifier" ] || [ -d "services/ai-sommelier-service" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Python service directories not found - skipping Python checks"
          fi

      - name: Setup Python
        if: steps.check_python.outputs.exists == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Run available linters
        run: |
          echo "Running linters for existing services..."
          # Add linting for existing files/directories
          if [ -f "Makefile" ]; then
            echo "✓ Makefile found"
          fi
          if [ -d "scripts" ]; then
            echo "✓ Scripts directory found"
            find scripts -name "*.sh" -exec bash -n {} \; || true
          fi
          if [ -d ".github/workflows" ]; then
            echo "✓ GitHub workflows found"
          fi

  # Job 2: Unit Tests (Matrix)
  unit-tests:
    name: Unit Tests (${{ matrix.service }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        service:
          - frontend
          - genui-orchestrator
          - kre-engine
          - user-context-service
          - pcm-classifier
          - ai-sommelier-service
          - streaming-adapter

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if service exists
        id: check_service
        run: |
          if [ -d "services/${{ matrix.service }}" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Service ${{ matrix.service }} found"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Service ${{ matrix.service }} not found - skipping tests"
          fi

      - name: Skip if service doesn't exist
        if: steps.check_service.outputs.exists == 'false'
        run: |
          echo "⚠️ Service ${{ matrix.service }} not yet implemented"
          echo "Skipping tests for ${{ matrix.service }}"
          exit 0

      # The rest of the test steps only run if service exists
      - name: Run tests for ${{ matrix.service }}
        if: steps.check_service.outputs.exists == 'true'
        run: |
          echo "Would run tests for ${{ matrix.service }} here"
          # Add actual test commands when services are implemented

  # Job 3: Database Migration Tests
  database-tests:
    name: Database Migration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: kaizen_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test migrations
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/kaizen_test
        run: |
          echo "Testing database migrations..."
          if [ -f "scripts/db/migrate.sh" ]; then
            chmod +x scripts/db/migrate.sh
            ./scripts/db/migrate.sh up || {
              echo "Migration up failed"
              exit 1
            }
            ./scripts/db/migrate.sh down 1 || {
              echo "Migration down failed"
              exit 1
            }
            echo "✓ Migration tests passed"
          else
            echo "Migration script not found"
            exit 1
          fi

  # Job 4: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: success()
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for integration tests
        id: check_integration
        run: |
          if [ -d "tests/integration" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Integration test directory not found - skipping"
          fi

      - name: Skip if no integration tests
        if: steps.check_integration.outputs.exists == 'false'
        run: |
          echo "⚠️ Integration tests not yet implemented"
          exit 0

  # Job 5: Build Docker Images
  build-images:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    if: success() && github.event_name == 'push'
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for Dockerfiles
        run: |
          echo "Checking for service Dockerfiles..."
          for service in frontend genui-orchestrator kre-engine user-context-service pcm-classifier ai-sommelier-service streaming-adapter; do
            if [ -f "services/$service/Dockerfile" ]; then
              echo "✓ Found Dockerfile for $service"
            else
              echo "⚠️ No Dockerfile for $service (not yet implemented)"
            fi
          done
          echo "Docker image building will be enabled when services are implemented"

  # Job 6: Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build-images]
    if: success()
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 7: E2E Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: success()
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for E2E tests
        run: |
          if [ -d "tests/e2e" ]; then
            echo "E2E test directory found"
          else
            echo "⚠️ E2E tests not yet implemented"
            exit 0
          fi

  # Job 8: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: success()
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for performance tests
        run: |
          if [ -f "benchmarks/performance-test.js" ]; then
            echo "✓ Performance test file found"
            # Would run k6 tests here when services are running
            echo "Performance tests will run when services are implemented"
          else
            echo "⚠️ Performance tests not found"
            exit 0
          fi
version: '3.9'

services:
  # Database Services
  postgres:
    image: postgres:16-alpine
    container_name: kaizen-postgres
    environment:
      POSTGRES_USER: kaizen
      POSTGRES_PASSWORD: kaizen_dev_password
      POSTGRES_DB: kaizen_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/db/init:/docker-entrypoint-initdb.d
    networks:
      - kaizen-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kaizen -d kaizen_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: kaizen-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - kaizen-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Vector Database for AI/ML
  pinecone-local:
    image: semitechnologies/weaviate:latest
    container_name: kaizen-vector-db
    ports:
      - "8080:8080"
    environment:
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'text2vec-transformers'
      ENABLE_MODULES: 'text2vec-transformers'
      TRANSFORMERS_INFERENCE_API: 'http://t2v-transformers:8080'
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - kaizen-network

  t2v-transformers:
    image: semitechnologies/transformers-inference:sentence-transformers-multi-qa-MiniLM-L6-cos-v1
    container_name: kaizen-transformers
    environment:
      ENABLE_CUDA: '0'
    networks:
      - kaizen-network

  # Frontend Service
  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile.dev
    container_name: kaizen-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./services/frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:4000
      NEXT_PUBLIC_WS_URL: ws://localhost:4001
    networks:
      - kaizen-network
    depends_on:
      - genui-orchestrator

  # GenUI Orchestrator (Go)
  genui-orchestrator:
    build:
      context: ./services/genui-orchestrator
      dockerfile: Dockerfile.dev
    container_name: kaizen-genui
    ports:
      - "4000:4000"
    volumes:
      - ./services/genui-orchestrator:/app
      - ./shared/contracts:/app/contracts
      - ./shared/protos:/app/protos
    environment:
      ENV: development
      PORT: 4000
      DATABASE_URL: postgres://kaizen:kaizen_dev_password@postgres:5432/kaizen_db?sslmode=disable
      REDIS_URL: redis://redis:6379
      KRE_SERVICE_URL: http://kre-engine:4001
      USER_CONTEXT_URL: http://user-context:4002
      PCM_CLASSIFIER_URL: http://pcm-classifier:4003
    networks:
      - kaizen-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # KRE Rule Engine (Rust)
  kre-engine:
    build:
      context: ./services/kre-engine
      dockerfile: Dockerfile.dev
    container_name: kaizen-kre
    ports:
      - "4001:4001"
    volumes:
      - ./services/kre-engine:/app
      - ./shared/contracts:/app/contracts
      - ./shared/protos:/app/protos
      - /app/target
    environment:
      ENV: development
      PORT: 4001
      DATABASE_URL: postgres://kaizen:kaizen_dev_password@postgres:5432/kaizen_db?sslmode=disable
      REDIS_URL: redis://redis:6379
    networks:
      - kaizen-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # User Context Service (Go)
  user-context:
    build:
      context: ./services/user-context-service
      dockerfile: Dockerfile.dev
    container_name: kaizen-user-context
    ports:
      - "4002:4002"
    volumes:
      - ./services/user-context-service:/app
      - ./shared/contracts:/app/contracts
      - ./shared/protos:/app/protos
    environment:
      ENV: development
      PORT: 4002
      DATABASE_URL: postgres://kaizen:kaizen_dev_password@postgres:5432/kaizen_db?sslmode=disable
      REDIS_URL: redis://redis:6379
      VECTOR_DB_URL: http://pinecone-local:8080
    networks:
      - kaizen-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # PCM Classifier (Python)
  pcm-classifier:
    build:
      context: ./services/pcm-classifier
      dockerfile: Dockerfile.dev
    container_name: kaizen-pcm
    ports:
      - "4003:4003"
    volumes:
      - ./services/pcm-classifier:/app
      - ./shared/contracts:/app/contracts
    environment:
      ENV: development
      PORT: 4003
      DATABASE_URL: postgresql://kaizen:kaizen_dev_password@postgres:5432/kaizen_db
      REDIS_URL: redis://redis:6379
      MODEL_PATH: /app/models
    networks:
      - kaizen-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # AI Sommelier Service (Python)
  ai-sommelier:
    build:
      context: ./services/ai-sommelier-service
      dockerfile: Dockerfile.dev
    container_name: kaizen-sommelier
    ports:
      - "4004:4004"
    volumes:
      - ./services/ai-sommelier-service:/app
      - ./shared/contracts:/app/contracts
    environment:
      ENV: development
      PORT: 4004
      DATABASE_URL: postgresql://kaizen:kaizen_dev_password@postgres:5432/kaizen_db
      REDIS_URL: redis://redis:6379
      VECTOR_DB_URL: http://pinecone-local:8080
    networks:
      - kaizen-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Streaming Adapter (Rust)
  streaming-adapter:
    build:
      context: ./services/streaming-adapter
      dockerfile: Dockerfile.dev
    container_name: kaizen-streaming
    ports:
      - "4005:4005"
      - "9000:9000"  # WebSocket port
    volumes:
      - ./services/streaming-adapter:/app
      - ./shared/protos:/app/protos
      - /app/target
    environment:
      ENV: development
      HTTP_PORT: 4005
      WS_PORT: 9000
      REDIS_URL: redis://redis:6379
      GENUI_URL: http://genui-orchestrator:4000
    networks:
      - kaizen-network
    depends_on:
      redis:
        condition: service_healthy

  # Development Tools
  adminer:
    image: adminer
    container_name: kaizen-adminer
    restart: always
    ports:
      - "8081:8080"
    networks:
      - kaizen-network
    depends_on:
      - postgres

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: kaizen-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8082:8081"
    networks:
      - kaizen-network
    depends_on:
      - redis

networks:
  kaizen-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  weaviate_data:
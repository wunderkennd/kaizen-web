#!/bin/bash

# Create GitHub Issues from Extracted Tasks
# This script creates GitHub issues from the CSV file generated by extract-tasks.sh

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOT_DIR="$(dirname "$SCRIPT_DIR")"

# Load configuration if available
if [[ -f "$ROOT_DIR/config.sh" ]]; then
    source "$ROOT_DIR/config.sh"
fi

# Default configuration
GITHUB_OWNER="${GITHUB_OWNER:-}"
GITHUB_REPO="${GITHUB_REPO:-}"
TASKS_FILE="${ROOT_DIR}/extracted-tasks.csv"
DRY_RUN="${DRY_RUN:-false}"
BATCH_SIZE="${BATCH_SIZE:-10}"
RATE_LIMIT_DELAY="${RATE_LIMIT_DELAY:-1}"
NEW_ONLY="${NEW_ONLY:-false}"

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check prerequisites
check_prerequisites() {
    # Check if gh CLI is installed
    if ! command -v gh &> /dev/null; then
        log_error "GitHub CLI (gh) is not installed!"
        log_info "Install from: https://cli.github.com/"
        exit 1
    fi
    
    # Check if authenticated
    if ! gh auth status &> /dev/null; then
        log_error "Not authenticated with GitHub!"
        log_info "Run: gh auth login"
        exit 1
    fi
    
    # Check if repo is specified
    if [[ -z "$GITHUB_OWNER" ]] || [[ -z "$GITHUB_REPO" ]]; then
        log_error "GitHub repository not specified!"
        log_info "Set GITHUB_OWNER and GITHUB_REPO in config.sh or environment variables."
        exit 1
    fi
    
    # Verify repository exists
    if ! gh repo view "$GITHUB_OWNER/$GITHUB_REPO" &> /dev/null; then
        log_error "Repository $GITHUB_OWNER/$GITHUB_REPO not found or not accessible!"
        exit 1
    fi
    
    # Check if tasks file exists
    if [[ ! -f "$TASKS_FILE" ]]; then
        log_error "Tasks file not found: $TASKS_FILE"
        log_info "Please run: ./02-extraction/extract-tasks.sh"
        exit 1
    fi
    
    log_success "Prerequisites checked"
}

# Function to clean and escape text for GitHub
clean_text() {
    local text="$1"
    # Remove surrounding quotes and escape special characters
    echo "$text" | sed 's/^"//; s/"$//' | sed 's/"/\\"/g'
}

# Function to check if issue already exists
issue_exists() {
    local title="$1"
    local task_id="$2"
    
    # Search for issues with the task ID in title
    local existing_issues
    existing_issues=$(gh issue list --repo "$GITHUB_OWNER/$GITHUB_REPO" --search "$task_id in:title" --json number,title --jq '.[].title')
    
    if echo "$existing_issues" | grep -q "$task_id"; then
        return 0  # Issue exists
    else
        return 1  # Issue doesn't exist
    fi
}

# Function to map priority to GitHub label
map_priority_label() {
    local priority="$1"
    case "$priority" in
        "P0") echo "P0-critical" ;;
        "P1") echo "P1-high" ;;
        "P2") echo "P2-medium" ;;
        "P3") echo "P3-low" ;;
        *) echo "P2-medium" ;;  # Default
    esac
}

# Function to map effort to size label
map_size_label() {
    local effort="$1"
    if [[ "$effort" =~ ^[0-9]+$ ]]; then
        if [[ $effort -le 2 ]]; then
            echo "size:XS"
        elif [[ $effort -le 5 ]]; then
            echo "size:S"
        elif [[ $effort -le 8 ]]; then
            echo "size:M"
        elif [[ $effort -le 13 ]]; then
            echo "size:L"
        else
            echo "size:XL"
        fi
    else
        echo "size:M"  # Default
    fi
}

# Function to generate issue body
generate_issue_body() {
    local task_id="$1"
    local title="$2"
    local component="$3"
    local dependencies="$4"
    local effort="$5"
    local priority="$6"
    local epic="$7"
    local description="$8"
    local spec_name="$9"
    
    # Clean inputs
    title=$(clean_text "$title")
    component=$(clean_text "$component")
    dependencies=$(clean_text "$dependencies")
    description=$(clean_text "$description")
    epic=$(clean_text "$epic")
    
    # Format dependencies
    local deps_formatted="None"
    if [[ "$dependencies" != "None" ]] && [[ "$dependencies" != "none" ]] && [[ -n "$dependencies" ]]; then
        deps_formatted="$dependencies"
    fi
    
    cat << EOF
# Task $task_id: $title

## 📋 Overview
**Epic**: $epic  
**Component**: $component  
**Effort**: $effort story points  
**Priority**: $priority  
**Dependencies**: $deps_formatted  

## 📝 Description
$description

## 👤 User Story
As a [role], I want [functionality] so that [benefit].

*Please update this section with specific user story details.*

## ✅ Acceptance Criteria
- [ ] Criterion 1: [Define specific, testable outcome]
- [ ] Criterion 2: [Define specific, testable outcome]
- [ ] Criterion 3: [Define specific, testable outcome]

*Please update with specific acceptance criteria for this task.*

## 🔧 Technical Context
### Implementation Notes
- [Technical approach or architecture considerations]
- [Key APIs, libraries, or frameworks to use]
- [Performance or security considerations]

### Design Decisions
- [ ] UI/UX design completed (if applicable)
- [ ] Architecture review completed
- [ ] Technical approach approved

## 📚 Resources & References
- [Link to specification document]
- [Related documentation]
- [External resources or APIs]

## 🧪 Testing Strategy
### Test Coverage
- [ ] Unit tests written and passing
- [ ] Integration tests written and passing
- [ ] End-to-end tests written and passing (if applicable)

### Validation
- [ ] Code review completed
- [ ] QA testing completed
- [ ] Performance testing completed (if applicable)

## 🔗 Related Issues
*This section will be updated with links to related issues and dependencies.*

## 📈 Definition of Done
- [ ] All acceptance criteria met
- [ ] Code written and reviewed
- [ ] Tests written and passing
- [ ] Documentation updated
- [ ] Deployed to staging environment
- [ ] QA approval received
- [ ] Ready for production deployment

---
**Specification**: $spec_name  
**Task ID**: $task_id  
*Created by spec-kit automation*
EOF
}

# Function to create a single GitHub issue
create_issue() {
    local task_id="$1"
    local title="$2"
    local component="$3"
    local dependencies="$4"
    local effort="$5"
    local priority="$6"
    local epic="$7"
    local description="$8"
    local spec_name="$9"
    
    # Clean title
    local clean_title
    clean_title=$(clean_text "$title")
    local issue_title="[$task_id] $clean_title"
    
    # Check if issue already exists
    if [[ "$NEW_ONLY" == "true" ]] && issue_exists "$issue_title" "$task_id"; then
        log_info "Issue already exists, skipping: $task_id"
        return 0
    fi
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log_info "[DRY RUN] Would create issue: $issue_title"
        return 0
    fi
    
    # Generate issue body
    local issue_body
    issue_body=$(generate_issue_body "$task_id" "$title" "$component" "$dependencies" "$effort" "$priority" "$epic" "$description" "$spec_name")
    
    # Map labels
    local priority_label
    priority_label=$(map_priority_label "$priority")
    local size_label
    size_label=$(map_size_label "$effort")
    local epic_label="epic:$(clean_text "$epic")"
    local component_label="component:$(clean_text "$component" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')"
    
    # Create labels array
    local labels="$priority_label,$size_label,$epic_label,$component_label,status:ready"
    
    log_info "Creating issue: $task_id - $clean_title"
    
    # Create the issue
    local issue_url
    if issue_url=$(gh issue create \
        --repo "$GITHUB_OWNER/$GITHUB_REPO" \
        --title "$issue_title" \
        --body "$issue_body" \
        --label "$labels" 2>&1); then
        log_success "Created issue: $task_id ($issue_url)"
        echo "$task_id,$issue_url" >> "${ROOT_DIR}/created-issues.csv"
        return 0
    else
        log_error "Failed to create issue: $task_id"
        log_error "Error: $issue_url"
        return 1
    fi
}

# Function to process tasks in batches
process_tasks() {
    local input_file="$1"
    
    log_info "Processing tasks from: $input_file"
    
    # Initialize results file
    echo "task_id,issue_url" > "${ROOT_DIR}/created-issues.csv"
    
    local total_tasks=0
    local created_count=0
    local failed_count=0
    local skipped_count=0
    local batch_count=0
    
    # Count total tasks (excluding header)
    total_tasks=$(($(wc -l < "$input_file") - 1))
    
    log_info "Total tasks to process: $total_tasks"
    
    # Process tasks
    local line_count=0
    while IFS=, read -r task_id title component dependencies effort priority epic description spec_name file_path; do
        line_count=$((line_count + 1))
        
        # Skip header
        if [[ $line_count -eq 1 ]]; then
            continue
        fi
        
        # Create issue
        if create_issue "$task_id" "$title" "$component" "$dependencies" "$effort" "$priority" "$epic" "$description" "$spec_name"; then
            created_count=$((created_count + 1))
        else
            failed_count=$((failed_count + 1))
        fi
        
        batch_count=$((batch_count + 1))
        
        # Rate limiting
        if [[ $batch_count -ge $BATCH_SIZE ]]; then
            log_info "Processed batch of $BATCH_SIZE issues. Pausing for rate limiting..."
            sleep "$RATE_LIMIT_DELAY"
            batch_count=0
        fi
        
        # Progress indicator
        local progress=$((line_count - 1))
        if [[ $((progress % 10)) -eq 0 ]] && [[ $progress -gt 0 ]]; then
            log_info "Progress: $progress/$total_tasks tasks processed"
        fi
        
    done < "$input_file"
    
    # Summary
    echo ""
    log_success "Issue creation completed!"
    log_info "Total tasks: $total_tasks"
    log_info "Created: $created_count"
    log_info "Failed: $failed_count"
    log_info "Skipped: $skipped_count"
    
    if [[ $failed_count -gt 0 ]]; then
        log_warning "Some issues failed to create. Check the output above for details."
    fi
}

# Function to list created issues
list_created_issues() {
    log_info "Listing recently created issues..."
    
    local issues
    issues=$(gh issue list --repo "$GITHUB_OWNER/$GITHUB_REPO" --limit 50 --json number,title,labels,state)
    
    if [[ -n "$issues" ]]; then
        echo "$issues" | jq -r '.[] | select(.title | test("\\[T[0-9]+\\]")) | "  #\(.number) - \(.title) (\(.state))"' | head -20
        
        local total_task_issues
        total_task_issues=$(echo "$issues" | jq -r '.[] | select(.title | test("\\[T[0-9]+\\]"))' | jq -s length)
        echo ""
        log_info "Total task issues found: $total_task_issues"
    else
        log_info "No issues found"
    fi
}

# Function to validate created issues
validate_created_issues() {
    log_info "Validating created issues..."
    
    if [[ ! -f "${ROOT_DIR}/created-issues.csv" ]]; then
        log_warning "No created issues file found"
        return 0
    fi
    
    local created_count
    created_count=$(($(wc -l < "${ROOT_DIR}/created-issues.csv") - 1))
    
    local expected_count
    expected_count=$(($(wc -l < "$TASKS_FILE") - 1))
    
    log_info "Expected issues: $expected_count"
    log_info "Created issues: $created_count"
    
    if [[ $created_count -eq $expected_count ]]; then
        log_success "All issues created successfully!"
    else
        log_warning "Issue count mismatch. Some issues may have failed to create."
    fi
}

# Main function
main() {
    log_info "Starting GitHub issue creation..."
    
    check_prerequisites
    
    echo ""
    log_info "Repository: $GITHUB_OWNER/$GITHUB_REPO"
    log_info "Tasks file: $TASKS_FILE"
    log_info "Dry run: $DRY_RUN"
    log_info "New only: $NEW_ONLY"
    log_info "Batch size: $BATCH_SIZE"
    log_info "Rate limit delay: ${RATE_LIMIT_DELAY}s"
    echo ""
    
    # Process tasks
    process_tasks "$TASKS_FILE"
    
    # Validate results
    if [[ "$DRY_RUN" != "true" ]]; then
        validate_created_issues
        list_created_issues
    fi
    
    echo ""
    log_info "Next steps:"
    echo "  1. Review created issues: gh issue list --repo $GITHUB_OWNER/$GITHUB_REPO"
    echo "  2. Enrich issues: ./03-github-setup/enrich-issues.sh"
    echo "  3. Assign to epics: ./04-organization/assign-to-epics.sh"
    echo "  4. Assign to milestones: ./04-organization/assign-to-milestones.sh"
}

# Help function
show_help() {
    echo "Create GitHub Issues from Extracted Tasks"
    echo ""
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -h, --help              Show this help message"
    echo "  -d, --dry-run           Show what would be created without making changes"
    echo "  -n, --new-only          Only create issues that don't already exist"
    echo "  -l, --list              List created issues and exit"
    echo "  -v, --validate          Validate created issues and exit"
    echo "  --tasks FILE            Specify tasks file (default: ../extracted-tasks.csv)"
    echo "  --batch-size N          Process N issues per batch (default: 10)"
    echo "  --delay N               Delay N seconds between batches (default: 1)"
    echo "  --repo OWNER/REPO       Specify GitHub repository"
    echo ""
    echo "Environment Variables:"
    echo "  GITHUB_OWNER            GitHub repository owner"
    echo "  GITHUB_REPO             GitHub repository name"
    echo "  BATCH_SIZE              Number of issues per batch"
    echo "  RATE_LIMIT_DELAY        Delay between batches (seconds)"
    echo ""
    echo "This script creates GitHub issues with:"
    echo "  • Task ID in title: [T001] Task Title"
    echo "  • Comprehensive issue description"
    echo "  • Appropriate labels (epic, priority, size, status)"
    echo "  • Acceptance criteria template"
    echo "  • Definition of done checklist"
    echo ""
    echo "Examples:"
    echo "  $0                                      # Create all issues"
    echo "  $0 --dry-run                           # Preview what would be created"
    echo "  $0 --new-only                          # Only create new issues"
    echo "  $0 --batch-size 5 --delay 2           # Slower processing for rate limits"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -d|--dry-run)
            DRY_RUN="true"
            shift
            ;;
        -n|--new-only)
            NEW_ONLY="true"
            shift
            ;;
        -l|--list)
            check_prerequisites
            list_created_issues
            exit 0
            ;;
        -v|--validate)
            check_prerequisites
            validate_created_issues
            exit 0
            ;;
        --tasks)
            TASKS_FILE="$2"
            shift 2
            ;;
        --batch-size)
            BATCH_SIZE="$2"
            shift 2
            ;;
        --delay)
            RATE_LIMIT_DELAY="$2"
            shift 2
            ;;
        --repo)
            if [[ "$2" =~ ^([^/]+)/([^/]+)$ ]]; then
                GITHUB_OWNER="${BASH_REMATCH[1]}"
                GITHUB_REPO="${BASH_REMATCH[2]}"
                shift 2
            else
                log_error "Invalid repository format. Use: owner/repo"
                exit 1
            fi
            ;;
        *)
            log_error "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Run main function
main "$@"